/***
    Copyright (c) 2019 Jeremy Wootten <https://github.com/jeremypw/widget-grid>

    This program is free software: you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License version 3, as published
    by the Free Software Foundation.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranties of
    MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
    PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program. If not, see <http://www.gnu.org/licenses/>.

    Authors: Jeremy Wootten <jeremy@elementaryos.org>
***/

/*** WidgetGrid.Item interface defines the characteristics needed by a widget to be used
     for display by WidgetGrid.View and generated by a WidgetGrid.ItemFactory.
*
*     NOTE:  Item implementations must not connect to any signals that the datainterface implementation may emit as
*     the WidgetGrid often replaces the data object when items are repositioned.
***/
namespace WidgetGrid {
public delegate void WidgetFunc (Item item);

public interface Item : Gtk.Widget {
    public abstract DataInterface data { get; set; default = null; }
    public abstract bool is_hovered { get; set; default = false; }

    /** After calling this, the correct height request for the widget is expected to be available **/
    public abstract bool set_max_width (int width, bool force = false);

    private static int _max_height;
    public static int max_height { get { return _max_height; } set { _max_height = value; } default = 256;}
    private static int _min_height;
    public static int min_height { get { return _min_height; } set { _min_height = value; } default = 16;}

    public abstract void get_preferred_height_for_width (int width, out int min_height, out int nat_height);
    public abstract void update_item (DataInterface? new_data = null);

    public virtual bool equal (Item b) {
        if (data != null && b.data != null) {
            return data.equal (b.data);
        } else {
            return false;
        }
    }

    public bool is_selected {
        get {
            return data != null ? data.is_selected : false;
        }
    }

    public uint64 data_id {
        get {
            return data != null ? data.data_id : -1;
        }
    }

    public bool is_cursor_position {
        get {
            return data != null ? data.is_cursor_position : false;
        }
    }

    public virtual void leave () {}
    public virtual void hovered (Gdk.EventMotion event) {}
    public virtual void enter () {}
}
}
